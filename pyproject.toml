[tool.poetry]
name = "crud-test"
version = "0.1.0"
description = "A CRUD coding in Django Framework"
authors = ["João Vítor <joaovitorpa.105@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
django = "^5.1.4"
django-types = "^0.20.0"
django-stubs-ext = "^5.1.1"
pytest-cov = "^6.0.0"
djangorestframework = "^3.15.2"


[tool.poetry.group.dev.dependencies]
pytest = "^8.3.4"
pytest-django = "^4.9.0"
ruff = "^0.8.2"
pylint = "^3.3.2"
pylint-django = "^2.6.1"
pylint-per-file-ignores = "^1.3.2"


[tool.ruff]
# Exclude common directories that should not be linted
exclude = [
    ".direnv",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "node_modules",
]
line-length = 120
indent-width = 4
target-version = "py311"

[tool.ruff.lint]
ignore = ["D203", "D213", "ANN001", "ANN201", "ARG002", "D101", "D100", "D106"]
select = [
    "ANN", # Annotations
    "ARG", # Arguments
    "B",   # Bugbear
    "C4",  # Comprehensions
    "D",   # Docstrings
    "DJ",  # Django
    "E",   # Pycodestyle
    "F",   # Flake8
    "I",   # Isort
    "N",   # Naming
    "Q",   # Quotes
    "SIM", # Simplify
    "UP",  # Pyupgrade
]
# Allow fixing all fixable issues
fixable = ["ALL"]
# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.ruff.lint.per-file-ignores]
# Ignore docstring and annotation rules in tests and __init__.py files
"tests/*" = ["D", "ANN"]
"__init__.py" = ["D"]


[tool.pylint.'MESSAGES CONTROL']
max-line-length = 120
disable = ["fixme", "too-many-arguments", "missing-module-docstring", "trailing-whitespace", "missing-class-docstring"]
load-plugins = ["pylint_per_file_ignores", "pylint_django"]
django-settings-module = "core.settings"
per-file-ignores = """
    /tests/:missing-function-docstring,assignment-from-no-return,not-context-manager,django-not-configured,imported-auth-user,missing-module-docstring
    /migrations/:invalid-name,missing-class-docstring,wrong-import-order
    models.py:too-many-ancestors
    manage.py:import-outside-toplevel
"""

[tool.poe.tasks.test]
help = "Pytest."
cmd = "pytest --cov --showlocals --tb=auto -ra --cov-branch --cov-report=term-missing"

[tool.poe.tasks.pylint]
cmd = "pylint backend"

[tool.poe.tasks.ruff]
cmd = "ruff check ."

[tool.poe.tasks.check]
sequence = ["pylint", "ruff"]

[tool.poe.tasks.format]
cmd = "ruff format ."

[tool.poe.tasks.dev]
help = "Run development server."
cmd = "python ./backend/manage.py runserver 127.0.0.1:8001"

[tool.poe.tasks.makemigrations]
help = "Generate new migrations."
cmd = "python ./backend/manage.py makemigrations"

[tool.poe.tasks.migrate]
help = "Migrate existing migrations."
cmd = "python ./backend/manage.py migrate"

[tool.poe.tasks.manage]
cmd = "python ./backend/manage.py"

[tool.django-stubs]
django_settings_module = "core.settings"
ignore_missing_model_attributes = true


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
